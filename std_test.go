package xlog

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGlobalLogger(t *testing.T) {
	o := newTestOutput()
	oldStd := std
	defer func() { std = oldStd }()
	SetLogger(New(Config{Output: o}))
	Debug("test")
	last := o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "debug", last["level"])
	o.reset()
	Debugf("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "debug", last["level"])
	o.reset()
	Info("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "info", last["level"])
	o.reset()
	Infof("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "info", last["level"])
	o.reset()
	Warn("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "warn", last["level"])
	o.reset()
	Warnf("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "warn", last["level"])
	o.reset()
	Error("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "error", last["level"])
	o.reset()
	Errorf("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "error", last["level"])
	o.reset()
	oldExit := exit1
	exit1 = func() {}
	defer func() { exit1 = oldExit }()
	Fatal("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "fatal", last["level"])
	o.reset()
	Fatalf("test")
	last = o.get()
	assert.Equal(t, "test", last["message"])
	assert.Equal(t, "fatal", last["level"])
	o.reset()
}
